parameters:
  EnvironmentName: 'Default'  # defaults for any parameters that aren't specified
  ServicePrincipleName: 'Default SPN Parameter'

jobs:
- job: 'InitializeEnvironmentVariables'
  steps:
  - powershell: |      
      Write-Host "Generic Var AgentPoolName = $(WindowsPool)"
      Write-Host "Generic Var Linux =$(LinuxPool)"
      Write-Host "Stage Var Region = $(location)"
      
    name: EnvironmentVariables  

########################################################################
# Setup Resource Group                                                 #
########################################################################
- deployment: 'SetupResourceGroup'
  displayName: Setup Resource Group
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 'InitializeEnvironmentVariables'
  strategy:
    runOnce:
      deploy:
        steps:
          - template: ResourceGroup\resourcegroup.yml 
            parameters:
              subscription: '${{ parameters.ServicePrincipleName }}'
              resourceGroupName: $(ResourceGroupName)

########################################################################
# Setup VNet & SubNets                                                 #
########################################################################
- deployment: 'SetupVnet'
  displayName: Setup VNet
  environment: ${{ parameters.EnvironmentName }}
  pool:
    name: '$(LinuxPool)'
  dependsOn: 'SetupResourceGroup'
  strategy:
    runOnce:
      deploy:
        steps:
          - template: Network\network.yml 
            parameters:
              subscription: '${{ parameters.ServicePrincipleName }}'


########################################################################
# Setup VNet & SubNets                                                 #
########################################################################
- deployment: 'Setupbastion'
  displayName: Setup bastion
  environment: ${{ parameters.EnvironmentName }}
  pool:
    name: '$(LinuxPool)'
  dependsOn: 'SetupVnet'
  strategy:
    runOnce:
      deploy:
        steps:
          - template: Bastion\bastion.yml 
            parameters:
              subscription: '${{ parameters.ServicePrincipleName }}'
              resourcegroupname: '$(ResourceGroupName)'  
              EnvironmentName: ${{ parameters.EnvironmentName }}


- deployment: 'CreateVM'
  displayName: Create VM
  environment: ${{ parameters.EnvironmentName }}
  pool:
    name: '$(LinuxPool)'
  dependsOn: 'SetupVnet'
  strategy:
    runOnce:
      deploy:
        steps:
          - template: Bastion/deployvms.yml  
            parameters:
              System.AccessToken: true
              System.Debug: true
              adminUsername: '$(adminUsername)'                                # username for access to the vm
              adminPassword: '$(adminPassword)'                          # password defined as a secret variable the GUI part of the pipeline
              serviceConnectionName: '${{ parameters.ServicePrincipleName }}'           # name of the service connection with permissions in the Subscription as well as the DevOps project
              location: '$(Region)' 
              resourceGroupName: '$(ResourceGroupName)'                # full new resource group name - works better this way with templates
              subscriptionId: '$(subid)'
              reCreateVMs: false                                    
              removeRgAfterDeployment: false                                      
              vmSize: 'Standard_D2s_v3'                         
              vmNames: '$(vmNames)'       
              datadisk: '1'                                     
              osImagePublisher: 'center-for-internet-security-inc'        # center-for-internet-security-inc  | MicrosoftWindowsServer    | Canonical
              osImageOffer:  'cis-windows-server-2019-v1-0-0-l2'       # cis-windows-server-2019-v1-0-0-l2 | 2019-Datacenter-smalldisk | 18.04-LTS
              osImageSku: 'cis-ws2019-l2'                           # cis-ws2019-l2                     | WindowsServer             | UbuntuServer
              createCustomNIC: true                                       # Choose true if VM is behind the loadbalancer. Use it only if createCustomNIC is true.
              attach_to_lb_name: ''                                         # Name of loadbalancer. Can be used only with createCustomNIC parameter.
              lb_address_backendpool: ''                                         # Name of loadbalancer's backendpool. VM's nic will be attached to this backend pool. Use it only if createCustomNIC is true.
              lb-inbound-nat-rules: ''                                         # Use it only if createCustomNIC is true
              osStorageAccountType: 'Premium_LRS'                             # type of storage for the OS disk, e.g. Standard_LRS, Standard_GRS, Premium_LRS
              Script1: ''                                        # See: see https://docs.microsoft.com/en-us/cli/azure/vm/run-command?view=azure-cli-latest and the template used
              vnetName: '$(vnetName)'                               # set the name of the vnet here
              subnetName: 'default'                               # set the name of the subnet here
              vnetCIDR:  $(vnetCIDR)
              subnetCIDR: $(subnetCIDR)
              tags: 'ostype=windows'
              EnvironmentName: ${{ parameters.EnvironmentName }}


########################################################################
# Setup Keyvault(s)                                                     #
########################################################################

- deployment: 'SetupKeyVault'
  displayName: Setup KeyVault
  pool:
    name: '$(LinuxPool)'
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 'SetupVnet'
  strategy:
    runOnce:
      deploy:
        steps:
        - template: KeyVault\keyvault.yml  # Template reference
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            resourcegroupname: '$(ResourceGroupName)'   
            EnvironmentName: ${{ parameters.EnvironmentName }} 

- deployment: 'Setup_StorageAccount'
  displayName: 'Setup Storage Account'
  pool:
    name: '$(LinuxPool)'
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 'SetupVnet'
  strategy:
    runOnce:
      deploy:
        steps:
          - ${{ if ne('NeedAuditStorage', 'No') }}:
            - template: Storage\storage.yml
              parameters:
                subscription: '${{ parameters.ServicePrincipleName }}'
                resourcegroupname: '$(ResourceGroupName)'
                storagename: '$(storageAccountNameIn)' 
                containername: '$(storagecontainerName)'
                blobnames: '$(IscontainerNeeded)'
          - ${{ if eq('NeedAuditStorage', 'NeedAuditStorage') }}:
            - template: Storage\storage.yml
              parameters:
                subscription: '${{ parameters.ServicePrincipleName }}'
                resourcegroupname: '$(ResourceGroupName)'
                storagename: '$(auditstorage)' 
                containername: '$(storagecontainerName)'
                #enablehierarchicalnamespace: false
                blobnames: 'test'


- deployment: 'Setup_Databases'
  displayName: Setup Databases
  pool:
    name: '$(WindowsPool)'
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 
  - 'SetupVnet'
  - 'SetupKeyVault'
  strategy:
    runOnce:
      deploy:
        steps:
        - template: DatabaseServer\databaseinstance.yml  
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            Resourcegroupname: '$(resourceGroupName)'

########################################################################
# Setup Data Factory                                                   #
########################################################################
- deployment: 'Setup_ADF'
  displayName: Setup Data Factory
  pool:
    name: '$(WindowsPool)'
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 
  - 'SetupResourceGroup'
  - 'SetupKeyVault'
  strategy:
    runOnce:
      deploy:
        steps:
        - template: DataFactory\datafactory.yml  
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            Resourcegroupname: '$(resourceGroupName)'
########################################################################
# Setup_Authorization                                                   #
########################################################################

- deployment: 'Setup_Authorization'
  displayName: Setup Authorization
  pool:
    name: '$(LinuxPool)'
  environment: ${{ parameters.EnvironmentName }}
  dependsOn: 'Setup_ADF'
  strategy:
    runOnce:
      deploy:
        steps:
        - template: DataFactory\datafactorypublishpermissions.yml  
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            Resourcegroupname: '$(resourceGroupName)'
            EnvironmentName: '${{ parameters.EnvironmentName }}'
        - template: DataFactory\linkedservicepermission.yml  
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            Resourcegroupname: '$(resourceGroupName)'           
        - template: KeyVault\keyvaultseurity.yml  
          parameters:
            subscription: '${{ parameters.ServicePrincipleName }}'
            Resourcegroupname: '$(resourceGroupName)'
